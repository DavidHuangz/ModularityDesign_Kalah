#TITLE	Coupling Validity Study
#SUMMARY	Measurements for the metrics used in the Coupling Validity Study: Paul Ralph and Ewan Tempero Construct Validity in Software Engineering Research and Software Metrics 22nd International Conference on Evaluation and Assessment in Software Engineering (EASE) 2018. https://doi.org/10.1145/3210459.3210461

##Dataset attributes
Timestamp	Sun May 16 20:48:18 NZST 2021
Tool	mete-analysis(coupling validity):20200425
System	a3-modular-kalah-zhua687
Codebase	submissions/a3-modular-kalah-zhua687/a3-modular-kalah-zhua687

##Measurements
#Metadata
Kind	Nominal	What 'kind' of module (Class, Interface, Enum, Annotation, Exception)
FAN-out (Coupling)	UnboundedCount	(trgtdcl) Only record dependencies to target modules whose declarations have been seen; (srcsttc) Record dependencies with respect to both instance and static fields and methods in the source module; (trgtsttic) Record dependencies to both instance and static fields and methods in the target module; (srccons) Consider constructors as invokers as creating coupling; (trgtcons) Record both invoking methods and calling construtors as creating dependencies; (type) Record dependencies between all types, including interfaces, enums, an annotations; (anc) Include dependencies to ancestors of source; (desc) Include descendants to ancestors of source; (inh) Include dependencies on targets whose accessed members were inherited; (nopoly) Do not record dependencies on targets whose members were accessed via polymorphism; (unidir) Dependencies are recorded as uni-directional, only from source to target.; (fanout) Record only dependencies from source to target (no-op when bidir); (mod) Record dependencies between modules (as opposed to between packages); (pres) Record only the presence (or not) of an occurrence of a dependency between entities; (atom) Consider only top-level types as atomic (nested types are not separate); (raw) Do not record dependencies due to synthetic constructs
FAN-in (Coupling)	UnboundedCount	(trgtdcl) Only record dependencies to target modules whose declarations have been seen; (srcsttc) Record dependencies with respect to both instance and static fields and methods in the source module; (trgtsttic) Record dependencies to both instance and static fields and methods in the target module; (srccons) Consider constructors as invokers as creating coupling; (trgtcons) Record both invoking methods and calling construtors as creating dependencies; (type) Record dependencies between all types, including interfaces, enums, an annotations; (anc) Include dependencies to ancestors of source; (desc) Include descendants to ancestors of source; (inh) Include dependencies on targets whose accessed members were inherited; (nopoly) Do not record dependencies on targets whose members were accessed via polymorphism; (unidir) Dependencies are recorded as uni-directional, only from source to target.; (fanin) Record only dependencies from target to source (no-op when bidir); (mod) Record dependencies between modules (as opposed to between packages); (pres) Record only the presence (or not) of an occurrence of a dependency between entities; (atom) Consider only top-level types as atomic (nested types are not separate); (raw) Do not record dependencies due to synthetic constructs
FAN-bidir (Coupling)	UnboundedCount	(trgtdcl) Only record dependencies to target modules whose declarations have been seen; (srcsttc) Record dependencies with respect to both instance and static fields and methods in the source module; (trgtsttic) Record dependencies to both instance and static fields and methods in the target module; (srccons) Consider constructors as invokers as creating coupling; (trgtcons) Record both invoking methods and calling construtors as creating dependencies; (type) Record dependencies between all types, including interfaces, enums, an annotations; (anc) Include dependencies to ancestors of source; (desc) Include descendants to ancestors of source; (inh) Include dependencies on targets whose accessed members were inherited; (nopoly) Do not record dependencies on targets whose members were accessed via polymorphism; (bidir) Dependencies are recorded as bi-directional. If A has a dependency to B, then B has a dependency to A; (fanout) Record only dependencies from source to target (no-op when bidir); (mod) Record dependencies between modules (as opposed to between packages); (pres) Record only the presence (or not) of an occurrence of a dependency between entities; (atom) Consider only top-level types as atomic (nested types are not separate); (raw) Do not record dependencies due to synthetic constructs
FAN-out-occr (Coupling)	UnboundedCount	(trgtdcl) Only record dependencies to target modules whose declarations have been seen; (srcsttc) Record dependencies with respect to both instance and static fields and methods in the source module; (trgtsttic) Record dependencies to both instance and static fields and methods in the target module; (srccons) Consider constructors as invokers as creating coupling; (trgtcons) Record both invoking methods and calling construtors as creating dependencies; (type) Record dependencies between all types, including interfaces, enums, an annotations; (anc) Include dependencies to ancestors of source; (desc) Include descendants to ancestors of source; (inh) Include dependencies on targets whose accessed members were inherited; (nopoly) Do not record dependencies on targets whose members were accessed via polymorphism; (unidir) Dependencies are recorded as uni-directional, only from source to target.; (fanout) Record only dependencies from source to target (no-op when bidir); (mod) Record dependencies between modules (as opposed to between packages); (occr) Record each occurrence of a dependency separately; (atom) Consider only top-level types as atomic (nested types are not separate); (raw) Do not record dependencies due to synthetic constructs
CBO (Coupling)	UnboundedCount	(trgtdcl) Only record dependencies to target modules whose declarations have been seen; (srcsttc) Record dependencies with respect to both instance and static fields and methods in the source module; (trgtsttic) Record dependencies to both instance and static fields and methods in the target module; (srccons) Consider constructors as invokers as creating coupling; (trgtcons) Record both invoking methods and calling construtors as creating dependencies; (type) Record dependencies between all types, including interfaces, enums, an annotations; (anc) Include dependencies to ancestors of source; (desc) Include descendants to ancestors of source; (inh) Include dependencies on targets whose accessed members were inherited; (nopoly) Do not record dependencies on targets whose members were accessed via polymorphism; (bidir) Dependencies are recorded as bi-directional. If A has a dependency to B, then B has a dependency to A; (fanout) Record only dependencies from source to target (no-op when bidir); (mod) Record dependencies between modules (as opposed to between packages); (pres) Record only the presence (or not) of an occurrence of a dependency between entities; (atom) Consider only top-level types as atomic (nested types are not separate); (raw) Do not record dependencies due to synthetic constructs
CBO-out (Coupling)	UnboundedCount	(trgtdcl) Only record dependencies to target modules whose declarations have been seen; (srcsttc) Record dependencies with respect to both instance and static fields and methods in the source module; (trgtsttic) Record dependencies to both instance and static fields and methods in the target module; (srccons) Consider constructors as invokers as creating coupling; (trgtcons) Record both invoking methods and calling construtors as creating dependencies; (type) Record dependencies between all types, including interfaces, enums, an annotations; (anc) Include dependencies to ancestors of source; (desc) Include descendants to ancestors of source; (inh) Include dependencies on targets whose accessed members were inherited; (nopoly) Do not record dependencies on targets whose members were accessed via polymorphism; (unidir) Dependencies are recorded as uni-directional, only from source to target.; (fanout) Record only dependencies from source to target (no-op when bidir); (mod) Record dependencies between modules (as opposed to between packages); (pres) Record only the presence (or not) of an occurrence of a dependency between entities; (atom) Consider only top-level types as atomic (nested types are not separate); (raw) Do not record dependencies due to synthetic constructs
MPC (Coupling)	UnboundedCount	(trgtdcl) Only record dependencies to target modules whose declarations have been seen; (pres) Record only the presence (or not) of an occurrence of a dependency between entities
ICP (Coupling)	UnboundedCount	(trgtdcl) Only record dependencies to target modules whose declarations have been seen
LCOM1 (Cohesion)	UnboundedCount	(srcsttc) Record dependencies with respect to both instance and static fields and methods in the source module; (srccons) Consider constructors as invokers as creating coupling; (init) Record all dependencies including those in all initialisers; (srcmem) Include dependencies to members of all visibilities in source
LCOM1-inst (Cohesion)	UnboundedCount	(srcinst) Only record dependencies with respect to instance fields and methods in the source module; (srccons) Consider constructors as invokers as creating coupling; (init) Record all dependencies including those in all initialisers; (srcmem) Include dependencies to members of all visibilities in source
LCOM2 (Cohesion)	UnboundedCount	(srcsttc) Record dependencies with respect to both instance and static fields and methods in the source module; (srccons) Consider constructors as invokers as creating coupling; (init) Record all dependencies including those in all initialisers; (srcmem) Include dependencies to members of all visibilities in source
LCOM2-inst (Cohesion)	UnboundedCount	(srcinst) Only record dependencies with respect to instance fields and methods in the source module; (srccons) Consider constructors as invokers as creating coupling; (init) Record all dependencies including those in all initialisers; (srcmem) Include dependencies to members of all visibilities in source
LCOM4 (Cohesion)	UnboundedCount	(Can't provide easy evidence for number of connected components) (srcinst) Only record dependencies with respect to instance fields and methods in the source module; (srccons) Consider constructors as invokers as creating coupling; (init) Record all dependencies including those in all initialisers; (srcmem) Include dependencies to members of all visibilities in source
NumMeth (Size)	UnboundedCount	(srcsttc) Record dependencies with respect to both instance and static fields and methods in the source module; (srccons) Consider constructors as invokers as creating coupling; (init) Record all dependencies including those in all initialisers; (raw) Do not record dependencies due to synthetic constructs; (srcmem) Include dependencies to members of all visibilities in source
NumFlds(Size)	UnboundedCount	(trgtall) Record dependencies to target modules whether or not the declarations have been seen; (srcsttc) Record dependencies with respect to both instance and static fields and methods in the source module; (type) Record dependencies between all types, including interfaces, enums, an annotations; (occr) Record each occurrence of a dependency separately; (prim) Include dependencies to primitive types; (same) Include dependencies to the same type
#Data
#Entity	Kind	Evidence	FAN-out (Coupling)	Evidence	FAN-in (Coupling)	Evidence	FAN-bidir (Coupling)	Evidence	FAN-out-occr (Coupling)	Evidence	CBO (Coupling)	Evidence	CBO-out (Coupling)	Evidence	MPC (Coupling)	Evidence	ICP (Coupling)	Evidence	LCOM1 (Cohesion)	Evidence	LCOM1-inst (Cohesion)	Evidence	LCOM2 (Cohesion)	Evidence	LCOM2-inst (Cohesion)	Evidence	LCOM4 (Cohesion)	Evidence	NumMeth (Size)	Evidence	NumFlds(Size)	Evidence
Main	Class	(not needed)	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	2	[Return:Main#public static void main(java.lang.String[]) {}, Main#public <init>() {}>junit.framework.TestCase#<init>() <>*:[1]]	0	[]
kalah.Display	Class	(not needed)	1	[kalah.IDisplay]	2	[kalah.Kalah, kalah.Game]	3	[kalah.IDisplay, kalah.Kalah, kalah.Game]	1	[Implements:kalah.Display>kalah.IDisplay]	2	[kalah.Kalah, kalah.Game]	0	[]	0	[]	0	[]	5	[kalah.Display#public int getUserInput() {}>>>kalah.Display#public void printWinner(int) {}, kalah.Display#public int getUserInput() {}>>>kalah.Display#public void printScore(int,int) {}, kalah.Display#public int getUserInput() {}>>>kalah.Display#public void printGameOver() {}, kalah.Display#public int getUserInput() {}>>>kalah.Display#public void printHouseEmpty() {}, kalah.Display#public int getUserInput() {}>>>kalah.Display#public void boardPrint(int[],int[],int,int) {}]	5	[kalah.Display#public int getUserInput() {}>>>kalah.Display#public void printWinner(int) {}, kalah.Display#public int getUserInput() {}>>>kalah.Display#public void printScore(int,int) {}, kalah.Display#public int getUserInput() {}>>>kalah.Display#public void printGameOver() {}, kalah.Display#public int getUserInput() {}>>>kalah.Display#public void printHouseEmpty() {}, kalah.Display#public int getUserInput() {}>>>kalah.Display#public void boardPrint(int[],int[],int,int) {}]	0	[]	0	[]	1	[kalah.Display#public void userInput(int) {}]	8	[Return:kalah.Display#public void userInput(int) {}, kalah.Display#public <init>(com.qualitascorpus.testsupport.IO) {}>java.lang.Object#public <init>() <>*:[1], Return:kalah.Display#public void printWinner(int) {}, Return:kalah.Display#public void boardPrint(int[],int[],int,int) {}, Return:kalah.Display#public void printScore(int,int) {}, Return:kalah.Display#public int getUserInput() {}, Return:kalah.Display#public void printHouseEmpty() {}, Return:kalah.Display#public void printGameOver() {}]	2	[kalah.Display#private int UserPrompt, kalah.Display#private final com.qualitascorpus.testsupport.IO io]
kalah.Game	Class	(not needed)	3	[kalah.IGame, kalah.Display, kalah.PlayerProp]	1	[kalah.Kalah]	4	[kalah.IGame, kalah.Display, kalah.PlayerProp, kalah.Kalah]	37	[kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public int returnStoreScore(int) {}:[8], Implements:kalah.Game>kalah.IGame, kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public int returnPlayerScore(int) {}:[41], kalah.Game#public boolean runGame() {}>kalah.Display#public int getUserInput() {}:[53], kalah.Game#public boolean runGame() {}>kalah.Display#public void printHouseEmpty() {}:[62], kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public boolean checkHouseEmpty() {}:[60], kalah.Game#public boolean runGame() {}>kalah.Display#public void printGameOver() {}:[28], kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public void playerMoves(int) {}:[58], kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public int[] pitArray(int) {}:[4], kalah.Game#public <init>(kalah.Display) {}>kalah.PlayerProp#public <init>() {}:[4], kalah.Game#public boolean runGame() {}>kalah.Display#public void userInput(int) {}:[51], kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public int returnStoreScore(int) {}:[69], kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public int[] pitArray(int) {}:[18], kalah.Game#public boolean runGame() {}>kalah.Display#public void boardPrint(int[],int[],int,int) {}:[11], kalah.Game#public int getData(java.lang.String) {}>kalah.PlayerProp#public int returnSeedsPit(int,int) {}:[4], kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public int returnStoreScore(int) {}:[35], kalah.Game#public boolean runGame() {}>kalah.Display#public void boardPrint(int[],int[],int,int) {}:[25], kalah.Game#public int getData(java.lang.String) {}>kalah.PlayerProp#public int returnSeedsPit(int,int) {}:[2], kalah.Game#public int getData(java.lang.String) {}>kalah.PlayerProp#public int returnSeedsPit(int,int) {}:[8], kalah.Game#private final kalah.PlayerProp playerProp, kalah.Game#public int getData(java.lang.String) {}>kalah.PlayerProp#public int returnPlayerScore(int) {}:[14], kalah.Game#public int getData(java.lang.String) {}>kalah.PlayerProp#public int returnSeedsPit(int,int) {}:[6], kalah.Game#public boolean runGame() {}>kalah.Display#public void printScore(int,int) {}:[44], kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public int getCurrentPlayer() {}:[50], kalah.Game#public int getData(java.lang.String) {}>kalah.PlayerProp#public void SetPlayerScores(int,int) {}:[12], kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public int[] pitArray(int) {}:[31], kalah.Game#public int gameProgress(java.lang.String,int,int,int,int) {}>kalah.PlayerProp#public int getCurrentPlayer() {}:[7], kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public int[] pitArray(int) {}:[65], Parameter:kalah.Game#public <init>(kalah.Display) {}>kalah.Display:[0], kalah.Game#private final kalah.Display display, kalah.Game#public boolean runGame() {}>kalah.Display#public void boardPrint(int[],int[],int,int) {}:[72], kalah.Game#public boolean runGame() {}>kalah.Display#public void printWinner(int) {}:[47], kalah.Game#public boolean runGame() {}>kalah.Display#public void printGameOver() {}:[15], kalah.Game#public boolean runGame() {}>kalah.Display#public void boardPrint(int[],int[],int,int) {}:[38], kalah.Game#public int gameProgress(java.lang.String,int,int,int,int) {}>kalah.PlayerProp#public int getCurrentPlayer() {}:[5], kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public int returnStoreScore(int) {}:[22], kalah.Game#public int getData(java.lang.String) {}>kalah.PlayerProp#public void SetPlayerScores(int,int) {}:[10]]	3	[kalah.Display, kalah.PlayerProp, kalah.Kalah]	2	[kalah.Display, kalah.PlayerProp]	18	[runGame()>kalah.Display#public void userInput(int) {}, runGame()>kalah.PlayerProp#public int returnStoreScore(int) {}, runGame()>kalah.Display#public int getUserInput() {}, runGame()>kalah.PlayerProp#public int returnPlayerScore(int) {}, runGame()>kalah.Display#public void printGameOver() {}, gameProgress(java.lang.String,int,int,int,int)>kalah.PlayerProp#public int getCurrentPlayer() {}, runGame()>kalah.PlayerProp#public boolean checkHouseEmpty() {}, runGame()>kalah.Display#public void printScore(int,int) {}, getData(java.lang.String)>kalah.PlayerProp#public void SetPlayerScores(int,int) {}, runGame()>kalah.PlayerProp#public int[] pitArray(int) {}, <init>(kalah.Display)>kalah.PlayerProp#public <init>() {}, runGame()>kalah.PlayerProp#public void playerMoves(int) {}, runGame()>kalah.Display#public void boardPrint(int[],int[],int,int) {}, runGame()>kalah.Display#public void printWinner(int) {}, runGame()>kalah.Display#public void printHouseEmpty() {}, getData(java.lang.String)>kalah.PlayerProp#public int returnPlayerScore(int) {}, getData(java.lang.String)>kalah.PlayerProp#public int returnSeedsPit(int,int) {}, runGame()>kalah.PlayerProp#public int getCurrentPlayer() {}]	75	[kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public int[] pitArray(int) {}:[4][0]int, kalah.Game#public boolean runGame() {}>kalah.Display#public void boardPrint(int[],int[],int,int) {}:[25][3]int, kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public int returnStoreScore(int) {}:[69][0]int, kalah.Game#public boolean runGame() {}>kalah.Display#public void boardPrint(int[],int[],int,int) {}:[25][0]int[], kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public int returnPlayerScore(int) {}:[41], kalah.Game#public int getData(java.lang.String) {}>kalah.PlayerProp#public void SetPlayerScores(int,int) {}:[10][0]int, kalah.Game#public boolean runGame() {}>kalah.Display#public void boardPrint(int[],int[],int,int) {}:[25][2]int, kalah.Game#public int getData(java.lang.String) {}>kalah.PlayerProp#public int returnPlayerScore(int) {}:[14][0]int, kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public void playerMoves(int) {}:[58], kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public int[] pitArray(int) {}:[18], kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public int returnStoreScore(int) {}:[69], kalah.Game#public boolean runGame() {}>kalah.Display#public void boardPrint(int[],int[],int,int) {}:[11], kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public int returnStoreScore(int) {}:[22][0]int, kalah.Game#public int getData(java.lang.String) {}>kalah.PlayerProp#public int returnSeedsPit(int,int) {}:[2], kalah.Game#public int getData(java.lang.String) {}>kalah.PlayerProp#public int returnSeedsPit(int,int) {}:[8], kalah.Game#public int getData(java.lang.String) {}>kalah.PlayerProp#public int returnPlayerScore(int) {}:[14], kalah.Game#public boolean runGame() {}>kalah.Display#public void printScore(int,int) {}:[44][1]int, kalah.Game#public int getData(java.lang.String) {}>kalah.PlayerProp#public int returnSeedsPit(int,int) {}:[4][1]int, kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public void playerMoves(int) {}:[58][0]int, kalah.Game#public boolean runGame() {}>kalah.Display#public void printScore(int,int) {}:[44], kalah.Game#public int getData(java.lang.String) {}>kalah.PlayerProp#public int returnSeedsPit(int,int) {}:[8][0]int, kalah.Game#public boolean runGame() {}>kalah.Display#public void boardPrint(int[],int[],int,int) {}:[25][1]int[], kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public int returnPlayerScore(int) {}:[41][0]int, kalah.Game#public int getData(java.lang.String) {}>kalah.PlayerProp#public int returnSeedsPit(int,int) {}:[6][1]int, kalah.Game#public int getData(java.lang.String) {}>kalah.PlayerProp#public int returnSeedsPit(int,int) {}:[8][1]int, kalah.Game#public int getData(java.lang.String) {}>kalah.PlayerProp#public int returnSeedsPit(int,int) {}:[2][1]int, kalah.Game#public int getData(java.lang.String) {}>kalah.PlayerProp#public void SetPlayerScores(int,int) {}:[12][0]int, kalah.Game#public int getData(java.lang.String) {}>kalah.PlayerProp#public void SetPlayerScores(int,int) {}:[12], kalah.Game#public boolean runGame() {}>kalah.Display#public void boardPrint(int[],int[],int,int) {}:[11][3]int, kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public int[] pitArray(int) {}:[31], kalah.Game#public boolean runGame() {}>kalah.Display#public void boardPrint(int[],int[],int,int) {}:[72][0]int[], kalah.Game#public boolean runGame() {}>kalah.Display#public void boardPrint(int[],int[],int,int) {}:[72], kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public int[] pitArray(int) {}:[65][0]int, kalah.Game#public int getData(java.lang.String) {}>kalah.PlayerProp#public void SetPlayerScores(int,int) {}:[10][1]int, kalah.Game#public boolean runGame() {}>kalah.Display#public void printGameOver() {}:[15], kalah.Game#public int gameProgress(java.lang.String,int,int,int,int) {}>kalah.PlayerProp#public int getCurrentPlayer() {}:[5], kalah.Game#public int getData(java.lang.String) {}>kalah.PlayerProp#public void SetPlayerScores(int,int) {}:[12][1]int, kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public int returnStoreScore(int) {}:[8], kalah.Game#public boolean runGame() {}>kalah.Display#public void boardPrint(int[],int[],int,int) {}:[38][1]int[], kalah.Game#public boolean runGame() {}>kalah.Display#public void boardPrint(int[],int[],int,int) {}:[72][3]int, kalah.Game#public boolean runGame() {}>kalah.Display#public int getUserInput() {}:[53], kalah.Game#public boolean runGame() {}>kalah.Display#public void boardPrint(int[],int[],int,int) {}:[38][2]int, kalah.Game#public boolean runGame() {}>kalah.Display#public void printHouseEmpty() {}:[62], kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public boolean checkHouseEmpty() {}:[60], kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public int returnStoreScore(int) {}:[35][0]int, kalah.Game#public int getData(java.lang.String) {}>kalah.PlayerProp#public int returnSeedsPit(int,int) {}:[2][0]int, kalah.Game#public boolean runGame() {}>kalah.Display#public void boardPrint(int[],int[],int,int) {}:[11][1]int[], kalah.Game#public boolean runGame() {}>kalah.Display#public void printGameOver() {}:[28], kalah.Game#public boolean runGame() {}>kalah.Display#public void boardPrint(int[],int[],int,int) {}:[72][1]int[], kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public int[] pitArray(int) {}:[18][0]int, kalah.Game#public boolean runGame() {}>kalah.Display#public void printScore(int,int) {}:[44][0]int, kalah.Game#public boolean runGame() {}>kalah.Display#public void boardPrint(int[],int[],int,int) {}:[11][0]int[], kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public int[] pitArray(int) {}:[4], kalah.Game#public boolean runGame() {}>kalah.Display#public void userInput(int) {}:[51], kalah.Game#public int getData(java.lang.String) {}>kalah.PlayerProp#public int returnSeedsPit(int,int) {}:[4][0]int, kalah.Game#public int getData(java.lang.String) {}>kalah.PlayerProp#public int returnSeedsPit(int,int) {}:[6][0]int, kalah.Game#public int getData(java.lang.String) {}>kalah.PlayerProp#public int returnSeedsPit(int,int) {}:[4], kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public int returnStoreScore(int) {}:[35], kalah.Game#public boolean runGame() {}>kalah.Display#public void boardPrint(int[],int[],int,int) {}:[11][2]int, kalah.Game#public boolean runGame() {}>kalah.Display#public void boardPrint(int[],int[],int,int) {}:[25], kalah.Game#public int getData(java.lang.String) {}>kalah.PlayerProp#public int returnSeedsPit(int,int) {}:[6], kalah.Game#public boolean runGame() {}>kalah.Display#public void printWinner(int) {}:[47][0]int, kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public int returnStoreScore(int) {}:[8][0]int, kalah.Game#public boolean runGame() {}>kalah.Display#public void boardPrint(int[],int[],int,int) {}:[38][0]int[], kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public int[] pitArray(int) {}:[31][0]int, kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public int getCurrentPlayer() {}:[50], kalah.Game#public boolean runGame() {}>kalah.Display#public void userInput(int) {}:[51][0]int, kalah.Game#public int gameProgress(java.lang.String,int,int,int,int) {}>kalah.PlayerProp#public int getCurrentPlayer() {}:[7], kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public int[] pitArray(int) {}:[65], kalah.Game#public boolean runGame() {}>kalah.Display#public void boardPrint(int[],int[],int,int) {}:[38][3]int, kalah.Game#public boolean runGame() {}>kalah.Display#public void printWinner(int) {}:[47], kalah.Game#public boolean runGame() {}>kalah.Display#public void boardPrint(int[],int[],int,int) {}:[72][2]int, kalah.Game#public boolean runGame() {}>kalah.Display#public void boardPrint(int[],int[],int,int) {}:[38], kalah.Game#public boolean runGame() {}>kalah.PlayerProp#public int returnStoreScore(int) {}:[22], kalah.Game#public int getData(java.lang.String) {}>kalah.PlayerProp#public void SetPlayerScores(int,int) {}:[10]]	3	[kalah.Game#public int getData(java.lang.String) {}>>>kalah.Game#public int getWinner() {}, kalah.Game#public boolean runGame() {}>>>kalah.Game#public int getWinner() {}, kalah.Game#public int gameProgress(java.lang.String,int,int,int,int) {}>>>kalah.Game#public int getWinner() {}]	3	[kalah.Game#public int getData(java.lang.String) {}>>>kalah.Game#public int getWinner() {}, kalah.Game#public boolean runGame() {}>>>kalah.Game#public int getWinner() {}, kalah.Game#public int gameProgress(java.lang.String,int,int,int,int) {}>>>kalah.Game#public int getWinner() {}]	0	[]	0	[]	1	[kalah.Game#public boolean runGame() {}]	5	[Return:kalah.Game#public int getWinner() {}, Return:kalah.Game#public boolean runGame() {}, Return:kalah.Game#public int gameProgress(java.lang.String,int,int,int,int) {}, Return:kalah.Game#public int getData(java.lang.String) {}, kalah.Game#public <init>(kalah.Display) {}>java.lang.Object#public <init>() <>*:[1]]	4	[kalah.Game#private final kalah.PlayerProp playerProp, kalah.Game#private final kalah.Display display, kalah.Game#private int playerInput, kalah.Game#private boolean printBoardOnce]
kalah.IDisplay	Interface	(not needed)	0	[]	1	[kalah.Display]	1	[kalah.Display]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	7	[kalah.IDisplay#public abstract void printHouseEmpty() <>, kalah.IDisplay#public abstract void printWinner(int) <>, kalah.IDisplay#public abstract void printScore(int,int) <>, kalah.IDisplay#public abstract void printGameOver() <>, kalah.IDisplay#public abstract void boardPrint(int[],int[],int,int) <>, kalah.IDisplay#public abstract void userInput(int) <>, kalah.IDisplay#public abstract int getUserInput() <>]	7	[Return:kalah.IDisplay#public abstract int getUserInput() <>, Return:kalah.IDisplay#public abstract void printGameOver() <>, Return:kalah.IDisplay#public abstract void userInput(int) <>, Return:kalah.IDisplay#public abstract void printScore(int,int) <>, Return:kalah.IDisplay#public abstract void boardPrint(int[],int[],int,int) <>, Return:kalah.IDisplay#public abstract void printWinner(int) <>, Return:kalah.IDisplay#public abstract void printHouseEmpty() <>]	0	[]
kalah.IGame	Interface	(not needed)	0	[]	1	[kalah.Game]	1	[kalah.Game]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	4	[kalah.IGame#public abstract int getWinner() <>, kalah.IGame#public abstract int gameProgress(java.lang.String,int,int,int,int) <>, kalah.IGame#public abstract boolean runGame() <>, kalah.IGame#public abstract int getData(java.lang.String) <>]	4	[Return:kalah.IGame#public abstract int getWinner() <>, Return:kalah.IGame#public abstract boolean runGame() <>, Return:kalah.IGame#public abstract int gameProgress(java.lang.String,int,int,int,int) <>, Return:kalah.IGame#public abstract int getData(java.lang.String) <>]	0	[]
kalah.IGetID	Interface	(not needed)	0	[]	3	[kalah.Pits, kalah.Store, kalah.Player]	3	[kalah.Pits, kalah.Store, kalah.Player]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	1	[kalah.IGetID#public abstract int getID() <>]	1	[Return:kalah.IGetID#public abstract int getID() <>]	0	[]
kalah.IGetScore	Interface	(not needed)	0	[]	2	[kalah.Store, kalah.Player]	2	[kalah.Store, kalah.Player]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	1	[kalah.IGetScore#public abstract int getScore() <>]	1	[Return:kalah.IGetScore#public abstract int getScore() <>]	0	[]
kalah.IPlayerProp	Interface	(not needed)	2	[kalah.Pits, kalah.Store]	1	[kalah.PlayerProp]	3	[kalah.PlayerProp, kalah.Pits, kalah.Store]	6	[Parameter:kalah.IPlayerProp#public abstract kalah.Pits switchPits(kalah.Pits) <>>kalah.Pits:[0], Parameter:kalah.IPlayerProp#public abstract boolean checkCapture(int,kalah.Pits,kalah.Store) <>>kalah.Pits:[1], Parameter:kalah.IPlayerProp#public abstract void addExcessSeeds(kalah.Pits,kalah.Store,int) <>>kalah.Store:[1], Return:kalah.IPlayerProp#public abstract kalah.Pits switchPits(kalah.Pits) <>, Parameter:kalah.IPlayerProp#public abstract void addExcessSeeds(kalah.Pits,kalah.Store,int) <>>kalah.Pits:[0], Parameter:kalah.IPlayerProp#public abstract boolean checkCapture(int,kalah.Pits,kalah.Store) <>>kalah.Store:[2]]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	0	[]	14	[kalah.IPlayerProp#public abstract kalah.Pits switchPits(kalah.Pits) <>, kalah.IPlayerProp#public abstract int returnStoreScore(int) <>, kalah.IPlayerProp#public abstract int returnSeedsPit(int,int) <>, kalah.IPlayerProp#public abstract int getOppositePit(int) <>, kalah.IPlayerProp#public abstract void SetPlayerScores(int,int) <>, kalah.IPlayerProp#public abstract void swapPlayersTurn() <>, kalah.IPlayerProp#public abstract void assignObjects() <>, kalah.IPlayerProp#public abstract int returnPlayerScore(int) <>, kalah.IPlayerProp#public abstract int[] pitArray(int) <>, kalah.IPlayerProp#public abstract void playerMoves(int) <>, kalah.IPlayerProp#public abstract int getCurrentPlayer() <>, kalah.IPlayerProp#public abstract void addExcessSeeds(kalah.Pits,kalah.Store,int) <>, kalah.IPlayerProp#public abstract boolean checkCapture(int,kalah.Pits,kalah.Store) <>, kalah.IPlayerProp#public abstract boolean checkHouseEmpty() <>]	14	[Return:kalah.IPlayerProp#public abstract void swapPlayersTurn() <>, Return:kalah.IPlayerProp#public abstract void SetPlayerScores(int,int) <>, Return:kalah.IPlayerProp#public abstract int[] pitArray(int) <>, Return:kalah.IPlayerProp#public abstract void assignObjects() <>, Return:kalah.IPlayerProp#public abstract kalah.Pits switchPits(kalah.Pits) <>, Return:kalah.IPlayerProp#public abstract int returnPlayerScore(int) <>, Return:kalah.IPlayerProp#public abstract int returnStoreScore(int) <>, Return:kalah.IPlayerProp#public abstract int getOppositePit(int) <>, Return:kalah.IPlayerProp#public abstract boolean checkCapture(int,kalah.Pits,kalah.Store) <>, Return:kalah.IPlayerProp#public abstract boolean checkHouseEmpty() <>, Return:kalah.IPlayerProp#public abstract void playerMoves(int) <>, Return:kalah.IPlayerProp#public abstract int returnSeedsPit(int,int) <>, Return:kalah.IPlayerProp#public abstract int getCurrentPlayer() <>, Return:kalah.IPlayerProp#public abstract void addExcessSeeds(kalah.Pits,kalah.Store,int) <>]	0	[]
kalah.Kalah	Class	(not needed)	2	[kalah.Display, kalah.Game]	0	[]	2	[kalah.Display, kalah.Game]	5	[kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.Game#public <init>(kalah.Display) {}:[2], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.Game#public boolean runGame() {}:[4], Local:kalah.Game:[1], kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.Display#public <init>(com.qualitascorpus.testsupport.IO) {}:[1], Local:kalah.Display:[0]]	2	[kalah.Display, kalah.Game]	2	[kalah.Display, kalah.Game]	3	[play(com.qualitascorpus.testsupport.IO)>kalah.Game#public <init>(kalah.Display) {}, play(com.qualitascorpus.testsupport.IO)>kalah.Game#public boolean runGame() {}, play(com.qualitascorpus.testsupport.IO)>kalah.Display#public <init>(com.qualitascorpus.testsupport.IO) {}]	1	[kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}>kalah.Game#public boolean runGame() {}:[4]]	1	[kalah.Kalah#public static void main(java.lang.String[]) {}>>>kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}]	0	[]	1	[value0]	0	[]	1	[kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}]	3	[Return:kalah.Kalah#public static void main(java.lang.String[]) {}, kalah.Kalah#public <init>() {}>java.lang.Object#public <init>() <>*:[1], Return:kalah.Kalah#public void play(com.qualitascorpus.testsupport.IO) {}]	1	[kalah.Kalah#private boolean gameRun]
kalah.Pits	Class	(not needed)	1	[kalah.IGetID]	2	[kalah.PlayerProp, kalah.IPlayerProp]	3	[kalah.PlayerProp, kalah.IPlayerProp, kalah.IGetID]	1	[Implements:kalah.Pits>kalah.IGetID]	1	[kalah.PlayerProp]	0	[]	0	[]	0	[]	4	[kalah.Pits#public int getID() {}>>>kalah.Pits#public int getPitsLength() {}, kalah.Pits#public int getID() {}>>>kalah.Pits#public int getSeedsInPos(int) {}, kalah.Pits#public int getID() {}>>>kalah.Pits#public void incrementPit(int) {}, kalah.Pits#public int getID() {}>>>kalah.Pits#public void emptyPit(int) {}]	4	[kalah.Pits#public int getID() {}>>>kalah.Pits#public int getPitsLength() {}, kalah.Pits#public int getID() {}>>>kalah.Pits#public int getSeedsInPos(int) {}, kalah.Pits#public int getID() {}>>>kalah.Pits#public void incrementPit(int) {}, kalah.Pits#public int getID() {}>>>kalah.Pits#public void emptyPit(int) {}]	0	[]	0	[]	2	[kalah.Pits#public int getID() {}, kalah.Pits#public void incrementPit(int) {}]	6	[Return:kalah.Pits#public int getID() {}, Return:kalah.Pits#public int getSeedsInPos(int) {}, kalah.Pits#public <init>(int) {}>java.lang.Object#public <init>() <>*:[1], Return:kalah.Pits#public void incrementPit(int) {}, Return:kalah.Pits#public void emptyPit(int) {}, Return:kalah.Pits#public int getPitsLength() {}]	2	[kalah.Pits#private final int PitsID, kalah.Pits#private final int[] pits]
kalah.Player	Class	(not needed)	2	[kalah.IGetScore, kalah.IGetID]	1	[kalah.PlayerProp]	3	[kalah.PlayerProp, kalah.IGetScore, kalah.IGetID]	2	[Implements:kalah.Player>kalah.IGetScore, Implements:kalah.Player>kalah.IGetID]	1	[kalah.PlayerProp]	0	[]	0	[]	0	[]	2	[kalah.Player#public int getID() {}>>>kalah.Player#public void setPlayerScore(int) {}, kalah.Player#public int getID() {}>>>kalah.Player#public int getScore() {}]	2	[kalah.Player#public int getID() {}>>>kalah.Player#public void setPlayerScore(int) {}, kalah.Player#public int getID() {}>>>kalah.Player#public int getScore() {}]	1	[value0]	1	[value0]	2	[kalah.Player#public int getID() {}, kalah.Player#public void setPlayerScore(int) {}]	4	[Return:kalah.Player#public int getID() {}, Return:kalah.Player#public int getScore() {}, Return:kalah.Player#public void setPlayerScore(int) {}, kalah.Player#public <init>(int) {}>java.lang.Object#public <init>() <>*:[1]]	2	[kalah.Player#private int score, kalah.Player#private final int PlayerID]
kalah.PlayerProp	Class	(not needed)	4	[kalah.IPlayerProp, kalah.Pits, kalah.Store, kalah.Player]	1	[kalah.Game]	5	[kalah.IPlayerProp, kalah.Pits, kalah.Store, kalah.Player, kalah.Game]	68	[kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>kalah.Pits#public int getSeedsInPos(int) {}:[5], kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}>kalah.Pits#public void incrementPit(int) {}:[15], kalah.PlayerProp#public int returnPlayerScore(int) {}>kalah.Player#public int getScore() {}:[6], kalah.PlayerProp#public <init>() {}>kalah.Store#public <init>(int) {}:[11], kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}>kalah.Pits#public int getSeedsInPos(int) {}:[8], kalah.PlayerProp#private final kalah.Store storeOne, kalah.PlayerProp#public kalah.Pits switchPits(kalah.Pits) {}>kalah.Player#public int getID() {}:[3], kalah.PlayerProp#private final kalah.Player playerTwo, kalah.PlayerProp#public int returnSeedsPit(int,int) {}>kalah.Pits#public int getID() {}:[2], kalah.PlayerProp#public void SetPlayerScores(int,int) {}>kalah.Store#public int getID() {}:[2], kalah.PlayerProp#public void playerMoves(int) {}>kalah.Pits#public int getPitsLength() {}:[5], kalah.PlayerProp#public int[] pitArray(int) {}>kalah.Pits#public int getSeedsInPos(int) {}:[8], kalah.PlayerProp#public void SetPlayerScores(int,int) {}>kalah.Player#public void setPlayerScore(int) {}:[6], Parameter:kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}>kalah.Pits:[0], kalah.PlayerProp#public void swapPlayersTurn() {}>kalah.Player#public int getID() {}:[3], kalah.PlayerProp#public int[] pitArray(int) {}>kalah.Pits#public int getID() {}:[4], kalah.PlayerProp#public int returnStoreScore(int) {}>kalah.Store#public int getScore() {}:[6], kalah.PlayerProp#public int[] pitArray(int) {}>kalah.Pits#public int getPitsLength() {}:[7], Local:kalah.Pits:[0], kalah.PlayerProp#public void playerMoves(int) {}>kalah.Pits#public void emptyPit(int) {}:[17], kalah.PlayerProp#public int returnPlayerScore(int) {}>kalah.Player#public int getID() {}:[2], kalah.PlayerProp#public void swapPlayersTurn() {}>kalah.Player#public int getID() {}:[8], kalah.PlayerProp#private final kalah.Store storeTwo, kalah.PlayerProp#public kalah.Pits switchPits(kalah.Pits) {}>kalah.Pits#public int getID() {}:[1], kalah.PlayerProp#public int returnSeedsPit(int,int) {}>kalah.Pits#public int getSeedsInPos(int) {}:[6], Parameter:kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>kalah.Pits:[1], kalah.PlayerProp#public <init>() {}>kalah.Player#public <init>(int) {}:[9], kalah.PlayerProp#public <init>() {}>kalah.Pits#public <init>(int) {}:[3], kalah.PlayerProp#public int[] pitArray(int) {}>kalah.Pits#public int getPitsLength() {}:[2], kalah.PlayerProp#public void playerMoves(int) {}>kalah.Pits#public int getSeedsInPos(int) {}:[3], kalah.PlayerProp#public int returnStoreScore(int) {}>kalah.Store#public int getID() {}:[2], kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>kalah.Pits#public int getSeedsInPos(int) {}:[3], Implements:kalah.PlayerProp>kalah.IPlayerProp, kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>kalah.Pits#public int getPitsLength() {}:[2], kalah.PlayerProp#public <init>() {}>kalah.Store#public <init>(int) {}:[13], Parameter:kalah.PlayerProp#public kalah.Pits switchPits(kalah.Pits) {}>kalah.Pits:[0], kalah.PlayerProp#public void assignObjects() {}>kalah.Player#public int getID() {}:[3], kalah.PlayerProp#public void SetPlayerScores(int,int) {}>kalah.Store#public int getScore() {}:[5], kalah.PlayerProp#private final kalah.Pits pitsTwo, kalah.PlayerProp#public void swapPlayersTurn() {}>kalah.Player#public int getID() {}:[5], kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}>kalah.Pits#public int getID() {}:[1], kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}>kalah.Pits#public int getSeedsInPos(int) {}:[11], kalah.PlayerProp#public void SetPlayerScores(int,int) {}>kalah.Store#public int getScore() {}:[9], kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}>kalah.Store#public void increaseStore(int) {}:[12], kalah.PlayerProp#public void playerMoves(int) {}>kalah.Pits#public void emptyPit(int) {}:[7], Return:kalah.PlayerProp#public kalah.Pits switchPits(kalah.Pits) {}, kalah.PlayerProp#public void playerMoves(int) {}>kalah.Pits#public void incrementPit(int) {}:[15], kalah.PlayerProp#private kalah.Pits pits, kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>kalah.Pits#public int getSeedsInPos(int) {}:[6], kalah.PlayerProp#public int returnStoreScore(int) {}>kalah.Store#public int getScore() {}:[4], kalah.PlayerProp#private kalah.Store store, kalah.PlayerProp#public <init>() {}>kalah.Player#public int getID() {}:[16], kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}>kalah.Pits#public int getPitsLength() {}:[5], kalah.PlayerProp#private final kalah.Player playerOne, kalah.PlayerProp#private final kalah.Pits pitsOne, kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}>kalah.Pits#public void emptyPit(int) {}:[14], Local:kalah.Pits:[2], kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}>kalah.Store#public void increaseStore(int) {}:[3], kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}>kalah.Pits#public int getID() {}:[6], kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>kalah.Pits#public void emptyPit(int) {}:[8], kalah.PlayerProp#public int returnPlayerScore(int) {}>kalah.Player#public int getScore() {}:[4], kalah.PlayerProp#public int returnSeedsPit(int,int) {}>kalah.Pits#public int getSeedsInPos(int) {}:[4], Parameter:kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}>kalah.Store:[1], kalah.PlayerProp#public <init>() {}>kalah.Player#public <init>(int) {}:[7], kalah.PlayerProp#public <init>() {}>kalah.Pits#public <init>(int) {}:[5], kalah.PlayerProp#public void SetPlayerScores(int,int) {}>kalah.Player#public void setPlayerScore(int) {}:[10], kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>kalah.Store#public void increaseStore(int) {}:[7], Parameter:kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>kalah.Store:[2]]	4	[kalah.Pits, kalah.Store, kalah.Player, kalah.Game]	3	[kalah.Pits, kalah.Store, kalah.Player]	34	[returnStoreScore(int)>kalah.Store#public int getScore() {}, <init>()>kalah.Store#public <init>(int) {}, returnPlayerScore(int)>kalah.Player#public int getScore() {}, playerMoves(int)>kalah.Pits#public int getPitsLength() {}, SetPlayerScores(int,int)>kalah.Store#public int getScore() {}, checkCapture(int,kalah.Pits,kalah.Store)>kalah.Store#public void increaseStore(int) {}, addExcessSeeds(kalah.Pits,kalah.Store,int)>kalah.Store#public void increaseStore(int) {}, playerMoves(int)>kalah.Pits#public int getSeedsInPos(int) {}, addExcessSeeds(kalah.Pits,kalah.Store,int)>kalah.Pits#public int getSeedsInPos(int) {}, addExcessSeeds(kalah.Pits,kalah.Store,int)>kalah.Pits#public void emptyPit(int) {}, addExcessSeeds(kalah.Pits,kalah.Store,int)>kalah.Pits#public void incrementPit(int) {}, pitArray(int)>kalah.Pits#public int getPitsLength() {}, <init>()>kalah.Pits#public <init>(int) {}, returnStoreScore(int)>kalah.Store#public int getID() {}, SetPlayerScores(int,int)>kalah.Store#public int getID() {}, returnPlayerScore(int)>kalah.Player#public int getID() {}, returnSeedsPit(int,int)>kalah.Pits#public int getID() {}, checkCapture(int,kalah.Pits,kalah.Store)>kalah.Pits#public int getSeedsInPos(int) {}, assignObjects()>kalah.Player#public int getID() {}, checkCapture(int,kalah.Pits,kalah.Store)>kalah.Pits#public void emptyPit(int) {}, switchPits(kalah.Pits)>kalah.Player#public int getID() {}, addExcessSeeds(kalah.Pits,kalah.Store,int)>kalah.Pits#public int getPitsLength() {}, pitArray(int)>kalah.Pits#public int getSeedsInPos(int) {}, playerMoves(int)>kalah.Pits#public void incrementPit(int) {}, playerMoves(int)>kalah.Pits#public void emptyPit(int) {}, swapPlayersTurn()>kalah.Player#public int getID() {}, <init>()>kalah.Player#public <init>(int) {}, switchPits(kalah.Pits)>kalah.Pits#public int getID() {}, addExcessSeeds(kalah.Pits,kalah.Store,int)>kalah.Pits#public int getID() {}, pitArray(int)>kalah.Pits#public int getID() {}, checkCapture(int,kalah.Pits,kalah.Store)>kalah.Pits#public int getPitsLength() {}, returnSeedsPit(int,int)>kalah.Pits#public int getSeedsInPos(int) {}, <init>()>kalah.Player#public int getID() {}, SetPlayerScores(int,int)>kalah.Player#public void setPlayerScore(int) {}]	65	[kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>kalah.Pits#public int getSeedsInPos(int) {}:[5], kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}>kalah.Pits#public void incrementPit(int) {}:[15], kalah.PlayerProp#public int returnPlayerScore(int) {}>kalah.Player#public int getScore() {}:[6], kalah.PlayerProp#public void SetPlayerScores(int,int) {}>kalah.Player#public void setPlayerScore(int) {}:[6][0]int, kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}>kalah.Store#public void increaseStore(int) {}:[12][0]int, kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}>kalah.Pits#public int getSeedsInPos(int) {}:[8], kalah.PlayerProp#public kalah.Pits switchPits(kalah.Pits) {}>kalah.Player#public int getID() {}:[3], kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}>kalah.Pits#public void emptyPit(int) {}:[14][0]int, kalah.PlayerProp#public int returnSeedsPit(int,int) {}>kalah.Pits#public int getID() {}:[2], kalah.PlayerProp#public void SetPlayerScores(int,int) {}>kalah.Store#public int getID() {}:[2], kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>kalah.Pits#public void emptyPit(int) {}:[8][0]int, kalah.PlayerProp#public void playerMoves(int) {}>kalah.Pits#public int getPitsLength() {}:[5], kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>kalah.Store#public void increaseStore(int) {}:[7][0]int, kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}>kalah.Pits#public int getSeedsInPos(int) {}:[11][0]int, kalah.PlayerProp#public int[] pitArray(int) {}>kalah.Pits#public int getSeedsInPos(int) {}:[8], kalah.PlayerProp#public int[] pitArray(int) {}>kalah.Pits#public int getSeedsInPos(int) {}:[8][0]int, kalah.PlayerProp#public void SetPlayerScores(int,int) {}>kalah.Player#public void setPlayerScore(int) {}:[6], kalah.PlayerProp#public void swapPlayersTurn() {}>kalah.Player#public int getID() {}:[3], kalah.PlayerProp#public int[] pitArray(int) {}>kalah.Pits#public int getID() {}:[4], kalah.PlayerProp#public int returnStoreScore(int) {}>kalah.Store#public int getScore() {}:[6], kalah.PlayerProp#public int[] pitArray(int) {}>kalah.Pits#public int getPitsLength() {}:[7], kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>kalah.Pits#public int getSeedsInPos(int) {}:[6][0]int, kalah.PlayerProp#public void playerMoves(int) {}>kalah.Pits#public void emptyPit(int) {}:[17], kalah.PlayerProp#public int returnPlayerScore(int) {}>kalah.Player#public int getID() {}:[2], kalah.PlayerProp#public void swapPlayersTurn() {}>kalah.Player#public int getID() {}:[8], kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}>kalah.Pits#public int getSeedsInPos(int) {}:[8][0]int, kalah.PlayerProp#public kalah.Pits switchPits(kalah.Pits) {}>kalah.Pits#public int getID() {}:[1], kalah.PlayerProp#public int returnSeedsPit(int,int) {}>kalah.Pits#public int getSeedsInPos(int) {}:[6], kalah.PlayerProp#public void playerMoves(int) {}>kalah.Pits#public void emptyPit(int) {}:[7][0]int, kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}>kalah.Store#public void increaseStore(int) {}:[3][0]int, kalah.PlayerProp#public int[] pitArray(int) {}>kalah.Pits#public int getPitsLength() {}:[2], kalah.PlayerProp#public void playerMoves(int) {}>kalah.Pits#public int getSeedsInPos(int) {}:[3], kalah.PlayerProp#public int returnStoreScore(int) {}>kalah.Store#public int getID() {}:[2], kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>kalah.Pits#public int getSeedsInPos(int) {}:[3], kalah.PlayerProp#public int returnSeedsPit(int,int) {}>kalah.Pits#public int getSeedsInPos(int) {}:[4][0]int, kalah.PlayerProp#public int returnSeedsPit(int,int) {}>kalah.Pits#public int getSeedsInPos(int) {}:[6][0]int, kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>kalah.Pits#public int getPitsLength() {}:[2], kalah.PlayerProp#public void assignObjects() {}>kalah.Player#public int getID() {}:[3], kalah.PlayerProp#public void playerMoves(int) {}>kalah.Pits#public void incrementPit(int) {}:[15][0]int, kalah.PlayerProp#public void SetPlayerScores(int,int) {}>kalah.Store#public int getScore() {}:[5], kalah.PlayerProp#public void playerMoves(int) {}>kalah.Pits#public void emptyPit(int) {}:[17][0]int, kalah.PlayerProp#public void swapPlayersTurn() {}>kalah.Player#public int getID() {}:[5], kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}>kalah.Pits#public int getID() {}:[1], kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}>kalah.Pits#public int getSeedsInPos(int) {}:[11], kalah.PlayerProp#public void SetPlayerScores(int,int) {}>kalah.Store#public int getScore() {}:[9], kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}>kalah.Pits#public void incrementPit(int) {}:[15][0]int, kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}>kalah.Store#public void increaseStore(int) {}:[12], kalah.PlayerProp#public void playerMoves(int) {}>kalah.Pits#public void emptyPit(int) {}:[7], kalah.PlayerProp#public void playerMoves(int) {}>kalah.Pits#public void incrementPit(int) {}:[15], kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>kalah.Pits#public int getSeedsInPos(int) {}:[6], kalah.PlayerProp#public int returnStoreScore(int) {}>kalah.Store#public int getScore() {}:[4], kalah.PlayerProp#public void SetPlayerScores(int,int) {}>kalah.Player#public void setPlayerScore(int) {}:[10][0]int, kalah.PlayerProp#public <init>() {}>kalah.Player#public int getID() {}:[16], kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>kalah.Pits#public int getSeedsInPos(int) {}:[5][0]int, kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}>kalah.Pits#public int getPitsLength() {}:[5], kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>kalah.Pits#public int getSeedsInPos(int) {}:[3][0]int, kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}>kalah.Pits#public void emptyPit(int) {}:[14], kalah.PlayerProp#public void playerMoves(int) {}>kalah.Pits#public int getSeedsInPos(int) {}:[3][0]int, kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}>kalah.Store#public void increaseStore(int) {}:[3], kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}>kalah.Pits#public int getID() {}:[6], kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>kalah.Pits#public void emptyPit(int) {}:[8], kalah.PlayerProp#public int returnPlayerScore(int) {}>kalah.Player#public int getScore() {}:[4], kalah.PlayerProp#public int returnSeedsPit(int,int) {}>kalah.Pits#public int getSeedsInPos(int) {}:[4], kalah.PlayerProp#public void SetPlayerScores(int,int) {}>kalah.Player#public void setPlayerScore(int) {}:[10], kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>kalah.Store#public void increaseStore(int) {}:[7]]	67	[kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>>>kalah.PlayerProp#public int getCurrentPlayer() {}, kalah.PlayerProp#public int returnStoreScore(int) {}>>>kalah.PlayerProp#public void swapPlayersTurn() {}, kalah.PlayerProp#public void SetPlayerScores(int,int) {}>>>kalah.PlayerProp#public void playerMoves(int) {}, kalah.PlayerProp#public boolean checkHouseEmpty() {}>>>kalah.PlayerProp#public int returnSeedsPit(int,int) {}, kalah.PlayerProp#public int returnPlayerScore(int) {}>>>kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}, kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>>>kalah.PlayerProp#public void assignObjects() {}, kalah.PlayerProp#public void SetPlayerScores(int,int) {}>>>kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}, kalah.PlayerProp#public boolean checkHouseEmpty() {}>>>kalah.PlayerProp#public int getOppositePit(int) {}, kalah.PlayerProp#public int getOppositePit(int) {}>>>kalah.PlayerProp#public int returnStoreScore(int) {}, kalah.PlayerProp#public int returnStoreScore(int) {}>>>kalah.PlayerProp#public void playerMoves(int) {}, kalah.PlayerProp#public boolean checkHouseEmpty() {}>>>kalah.PlayerProp#public int[] pitArray(int) {}, kalah.PlayerProp#public int getCurrentPlayer() {}>>>kalah.PlayerProp#public void playerMoves(int) {}, kalah.PlayerProp#public int getCurrentPlayer() {}>>>kalah.PlayerProp#public int[] pitArray(int) {}, kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>>>kalah.PlayerProp#public void playerMoves(int) {}, kalah.PlayerProp#public int returnPlayerScore(int) {}>>>kalah.PlayerProp#public int returnStoreScore(int) {}, kalah.PlayerProp#public boolean checkHouseEmpty() {}>>>kalah.PlayerProp#public void SetPlayerScores(int,int) {}, kalah.PlayerProp#public int getOppositePit(int) {}>>>kalah.PlayerProp#public void swapPlayersTurn() {}, kalah.PlayerProp#public boolean checkHouseEmpty() {}>>>kalah.PlayerProp#public void assignObjects() {}, kalah.PlayerProp#public boolean checkHouseEmpty() {}>>>kalah.PlayerProp#public kalah.Pits switchPits(kalah.Pits) {}, kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>>>kalah.PlayerProp#public int returnSeedsPit(int,int) {}, kalah.PlayerProp#public int getCurrentPlayer() {}>>>kalah.PlayerProp#public int returnSeedsPit(int,int) {}, kalah.PlayerProp#public int getOppositePit(int) {}>>>kalah.PlayerProp#public int[] pitArray(int) {}, kalah.PlayerProp#public int getOppositePit(int) {}>>>kalah.PlayerProp#public int returnPlayerScore(int) {}, kalah.PlayerProp#public int returnPlayerScore(int) {}>>>kalah.PlayerProp#public void playerMoves(int) {}, kalah.PlayerProp#public int[] pitArray(int) {}>>>kalah.PlayerProp#public void SetPlayerScores(int,int) {}, kalah.PlayerProp#public boolean checkHouseEmpty() {}>>>kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}, kalah.PlayerProp#public boolean checkHouseEmpty() {}>>>kalah.PlayerProp#public void swapPlayersTurn() {}, kalah.PlayerProp#public int returnSeedsPit(int,int) {}>>>kalah.PlayerProp#public void swapPlayersTurn() {}, kalah.PlayerProp#public boolean checkHouseEmpty() {}>>>kalah.PlayerProp#public int returnStoreScore(int) {}, kalah.PlayerProp#public int returnSeedsPit(int,int) {}>>>kalah.PlayerProp#public void SetPlayerScores(int,int) {}, kalah.PlayerProp#public int getOppositePit(int) {}>>>kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}, kalah.PlayerProp#public int returnStoreScore(int) {}>>>kalah.PlayerProp#public kalah.Pits switchPits(kalah.Pits) {}, kalah.PlayerProp#public int getOppositePit(int) {}>>>kalah.PlayerProp#public kalah.Pits switchPits(kalah.Pits) {}, kalah.PlayerProp#public int returnPlayerScore(int) {}>>>kalah.PlayerProp#public int[] pitArray(int) {}, kalah.PlayerProp#public int returnStoreScore(int) {}>>>kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}, kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}>>>kalah.PlayerProp#public void playerMoves(int) {}, kalah.PlayerProp#public kalah.Pits switchPits(kalah.Pits) {}>>>kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}, kalah.PlayerProp#public int[] pitArray(int) {}>>>kalah.PlayerProp#public void playerMoves(int) {}, kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>>>kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}, kalah.PlayerProp#public kalah.Pits switchPits(kalah.Pits) {}>>>kalah.PlayerProp#public void playerMoves(int) {}, kalah.PlayerProp#public int getCurrentPlayer() {}>>>kalah.PlayerProp#public kalah.Pits switchPits(kalah.Pits) {}, kalah.PlayerProp#public int getOppositePit(int) {}>>>kalah.PlayerProp#public void assignObjects() {}, kalah.PlayerProp#public int returnSeedsPit(int,int) {}>>>kalah.PlayerProp#public void playerMoves(int) {}, kalah.PlayerProp#public int[] pitArray(int) {}>>>kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}, kalah.PlayerProp#public int returnPlayerScore(int) {}>>>kalah.PlayerProp#public int returnSeedsPit(int,int) {}, kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>>>kalah.PlayerProp#public int returnPlayerScore(int) {}, kalah.PlayerProp#public int getOppositePit(int) {}>>>kalah.PlayerProp#public void SetPlayerScores(int,int) {}, kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>>>kalah.PlayerProp#public int[] pitArray(int) {}, kalah.PlayerProp#public int[] pitArray(int) {}>>>kalah.PlayerProp#public void swapPlayersTurn() {}, kalah.PlayerProp#public int returnSeedsPit(int,int) {}>>>kalah.PlayerProp#public int returnStoreScore(int) {}, kalah.PlayerProp#public int getCurrentPlayer() {}>>>kalah.PlayerProp#public void SetPlayerScores(int,int) {}, kalah.PlayerProp#public int getOppositePit(int) {}>>>kalah.PlayerProp#public void playerMoves(int) {}, kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>>>kalah.PlayerProp#public int returnStoreScore(int) {}, kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>>>kalah.PlayerProp#public kalah.Pits switchPits(kalah.Pits) {}, kalah.PlayerProp#public int getCurrentPlayer() {}>>>kalah.PlayerProp#public int getOppositePit(int) {}, kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>>>kalah.PlayerProp#public boolean checkHouseEmpty() {}, kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>>>kalah.PlayerProp#public void SetPlayerScores(int,int) {}, kalah.PlayerProp#public int returnStoreScore(int) {}>>>kalah.PlayerProp#public int[] pitArray(int) {}, kalah.PlayerProp#public int getCurrentPlayer() {}>>>kalah.PlayerProp#public int returnStoreScore(int) {}, kalah.PlayerProp#public int getCurrentPlayer() {}>>>kalah.PlayerProp#public int returnPlayerScore(int) {}, kalah.PlayerProp#public int getOppositePit(int) {}>>>kalah.PlayerProp#public int returnSeedsPit(int,int) {}, kalah.PlayerProp#public void playerMoves(int) {}>>>kalah.PlayerProp#public void swapPlayersTurn() {}, kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>>>kalah.PlayerProp#public void swapPlayersTurn() {}, kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>>>kalah.PlayerProp#public int getOppositePit(int) {}, kalah.PlayerProp#public boolean checkHouseEmpty() {}>>>kalah.PlayerProp#public int returnPlayerScore(int) {}, kalah.PlayerProp#public int returnSeedsPit(int,int) {}>>>kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}, kalah.PlayerProp#public boolean checkHouseEmpty() {}>>>kalah.PlayerProp#public int getCurrentPlayer() {}]	67	[kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>>>kalah.PlayerProp#public int getCurrentPlayer() {}, kalah.PlayerProp#public int returnStoreScore(int) {}>>>kalah.PlayerProp#public void swapPlayersTurn() {}, kalah.PlayerProp#public void SetPlayerScores(int,int) {}>>>kalah.PlayerProp#public void playerMoves(int) {}, kalah.PlayerProp#public boolean checkHouseEmpty() {}>>>kalah.PlayerProp#public int returnSeedsPit(int,int) {}, kalah.PlayerProp#public int returnPlayerScore(int) {}>>>kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}, kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>>>kalah.PlayerProp#public void assignObjects() {}, kalah.PlayerProp#public void SetPlayerScores(int,int) {}>>>kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}, kalah.PlayerProp#public boolean checkHouseEmpty() {}>>>kalah.PlayerProp#public int getOppositePit(int) {}, kalah.PlayerProp#public int getOppositePit(int) {}>>>kalah.PlayerProp#public int returnStoreScore(int) {}, kalah.PlayerProp#public int returnStoreScore(int) {}>>>kalah.PlayerProp#public void playerMoves(int) {}, kalah.PlayerProp#public boolean checkHouseEmpty() {}>>>kalah.PlayerProp#public int[] pitArray(int) {}, kalah.PlayerProp#public int getCurrentPlayer() {}>>>kalah.PlayerProp#public void playerMoves(int) {}, kalah.PlayerProp#public int getCurrentPlayer() {}>>>kalah.PlayerProp#public int[] pitArray(int) {}, kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>>>kalah.PlayerProp#public void playerMoves(int) {}, kalah.PlayerProp#public int returnPlayerScore(int) {}>>>kalah.PlayerProp#public int returnStoreScore(int) {}, kalah.PlayerProp#public boolean checkHouseEmpty() {}>>>kalah.PlayerProp#public void SetPlayerScores(int,int) {}, kalah.PlayerProp#public int getOppositePit(int) {}>>>kalah.PlayerProp#public void swapPlayersTurn() {}, kalah.PlayerProp#public boolean checkHouseEmpty() {}>>>kalah.PlayerProp#public void assignObjects() {}, kalah.PlayerProp#public boolean checkHouseEmpty() {}>>>kalah.PlayerProp#public kalah.Pits switchPits(kalah.Pits) {}, kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>>>kalah.PlayerProp#public int returnSeedsPit(int,int) {}, kalah.PlayerProp#public int getCurrentPlayer() {}>>>kalah.PlayerProp#public int returnSeedsPit(int,int) {}, kalah.PlayerProp#public int getOppositePit(int) {}>>>kalah.PlayerProp#public int[] pitArray(int) {}, kalah.PlayerProp#public int getOppositePit(int) {}>>>kalah.PlayerProp#public int returnPlayerScore(int) {}, kalah.PlayerProp#public int returnPlayerScore(int) {}>>>kalah.PlayerProp#public void playerMoves(int) {}, kalah.PlayerProp#public int[] pitArray(int) {}>>>kalah.PlayerProp#public void SetPlayerScores(int,int) {}, kalah.PlayerProp#public boolean checkHouseEmpty() {}>>>kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}, kalah.PlayerProp#public boolean checkHouseEmpty() {}>>>kalah.PlayerProp#public void swapPlayersTurn() {}, kalah.PlayerProp#public int returnSeedsPit(int,int) {}>>>kalah.PlayerProp#public void swapPlayersTurn() {}, kalah.PlayerProp#public boolean checkHouseEmpty() {}>>>kalah.PlayerProp#public int returnStoreScore(int) {}, kalah.PlayerProp#public int returnSeedsPit(int,int) {}>>>kalah.PlayerProp#public void SetPlayerScores(int,int) {}, kalah.PlayerProp#public int getOppositePit(int) {}>>>kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}, kalah.PlayerProp#public int returnStoreScore(int) {}>>>kalah.PlayerProp#public kalah.Pits switchPits(kalah.Pits) {}, kalah.PlayerProp#public int getOppositePit(int) {}>>>kalah.PlayerProp#public kalah.Pits switchPits(kalah.Pits) {}, kalah.PlayerProp#public int returnPlayerScore(int) {}>>>kalah.PlayerProp#public int[] pitArray(int) {}, kalah.PlayerProp#public int returnStoreScore(int) {}>>>kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}, kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}>>>kalah.PlayerProp#public void playerMoves(int) {}, kalah.PlayerProp#public kalah.Pits switchPits(kalah.Pits) {}>>>kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}, kalah.PlayerProp#public int[] pitArray(int) {}>>>kalah.PlayerProp#public void playerMoves(int) {}, kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>>>kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}, kalah.PlayerProp#public kalah.Pits switchPits(kalah.Pits) {}>>>kalah.PlayerProp#public void playerMoves(int) {}, kalah.PlayerProp#public int getCurrentPlayer() {}>>>kalah.PlayerProp#public kalah.Pits switchPits(kalah.Pits) {}, kalah.PlayerProp#public int getOppositePit(int) {}>>>kalah.PlayerProp#public void assignObjects() {}, kalah.PlayerProp#public int returnSeedsPit(int,int) {}>>>kalah.PlayerProp#public void playerMoves(int) {}, kalah.PlayerProp#public int[] pitArray(int) {}>>>kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}, kalah.PlayerProp#public int returnPlayerScore(int) {}>>>kalah.PlayerProp#public int returnSeedsPit(int,int) {}, kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>>>kalah.PlayerProp#public int returnPlayerScore(int) {}, kalah.PlayerProp#public int getOppositePit(int) {}>>>kalah.PlayerProp#public void SetPlayerScores(int,int) {}, kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>>>kalah.PlayerProp#public int[] pitArray(int) {}, kalah.PlayerProp#public int[] pitArray(int) {}>>>kalah.PlayerProp#public void swapPlayersTurn() {}, kalah.PlayerProp#public int returnSeedsPit(int,int) {}>>>kalah.PlayerProp#public int returnStoreScore(int) {}, kalah.PlayerProp#public int getCurrentPlayer() {}>>>kalah.PlayerProp#public void SetPlayerScores(int,int) {}, kalah.PlayerProp#public int getOppositePit(int) {}>>>kalah.PlayerProp#public void playerMoves(int) {}, kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>>>kalah.PlayerProp#public int returnStoreScore(int) {}, kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>>>kalah.PlayerProp#public kalah.Pits switchPits(kalah.Pits) {}, kalah.PlayerProp#public int getCurrentPlayer() {}>>>kalah.PlayerProp#public int getOppositePit(int) {}, kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>>>kalah.PlayerProp#public boolean checkHouseEmpty() {}, kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>>>kalah.PlayerProp#public void SetPlayerScores(int,int) {}, kalah.PlayerProp#public int returnStoreScore(int) {}>>>kalah.PlayerProp#public int[] pitArray(int) {}, kalah.PlayerProp#public int getCurrentPlayer() {}>>>kalah.PlayerProp#public int returnStoreScore(int) {}, kalah.PlayerProp#public int getCurrentPlayer() {}>>>kalah.PlayerProp#public int returnPlayerScore(int) {}, kalah.PlayerProp#public int getOppositePit(int) {}>>>kalah.PlayerProp#public int returnSeedsPit(int,int) {}, kalah.PlayerProp#public void playerMoves(int) {}>>>kalah.PlayerProp#public void swapPlayersTurn() {}, kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>>>kalah.PlayerProp#public void swapPlayersTurn() {}, kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}>>>kalah.PlayerProp#public int getOppositePit(int) {}, kalah.PlayerProp#public boolean checkHouseEmpty() {}>>>kalah.PlayerProp#public int returnPlayerScore(int) {}, kalah.PlayerProp#public int returnSeedsPit(int,int) {}>>>kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}, kalah.PlayerProp#public boolean checkHouseEmpty() {}>>>kalah.PlayerProp#public int getCurrentPlayer() {}]	43	[value6, value5, value8, value31, value7, value30, value2, value1, value4, value3, value9, value19, value18, value15, value37, value14, value36, value17, value39, value16, value38, value11, value33, value10, value32, value13, value35, value12, value34, value40, value20, value42, value41, value29, value26, value25, value0, value28, value27, value22, value21, value24, value23]	43	[value6, value5, value8, value31, value7, value30, value2, value1, value4, value3, value9, value19, value18, value15, value37, value14, value36, value17, value39, value16, value38, value11, value33, value10, value32, value13, value35, value12, value34, value40, value20, value42, value41, value29, value26, value25, value0, value28, value27, value22, value21, value24, value23]	1	[kalah.PlayerProp#public void swapPlayersTurn() {}]	15	[kalah.PlayerProp#public <init>() {}>java.lang.Object#public <init>() <>*:[1], Return:kalah.PlayerProp#public void assignObjects() {}, Return:kalah.PlayerProp#public int returnSeedsPit(int,int) {}, Return:kalah.PlayerProp#public int returnStoreScore(int) {}, Return:kalah.PlayerProp#public int getOppositePit(int) {}, Return:kalah.PlayerProp#public int getCurrentPlayer() {}, Return:kalah.PlayerProp#public boolean checkCapture(int,kalah.Pits,kalah.Store) {}, Return:kalah.PlayerProp#public void SetPlayerScores(int,int) {}, Return:kalah.PlayerProp#public void playerMoves(int) {}, Return:kalah.PlayerProp#public boolean checkHouseEmpty() {}, Return:kalah.PlayerProp#public void addExcessSeeds(kalah.Pits,kalah.Store,int) {}, Return:kalah.PlayerProp#public void swapPlayersTurn() {}, Return:kalah.PlayerProp#public kalah.Pits switchPits(kalah.Pits) {}, Return:kalah.PlayerProp#public int[] pitArray(int) {}, Return:kalah.PlayerProp#public int returnPlayerScore(int) {}]	10	[kalah.PlayerProp#private final kalah.Player playerTwo, kalah.PlayerProp#private final kalah.Pits pitsTwo, kalah.PlayerProp#private kalah.Store store, kalah.PlayerProp#private final kalah.Store storeTwo, kalah.PlayerProp#private int currentPlayer, kalah.PlayerProp#private final kalah.Player playerOne, kalah.PlayerProp#public boolean noSeeds, kalah.PlayerProp#private final kalah.Pits pitsOne, kalah.PlayerProp#private final kalah.Store storeOne, kalah.PlayerProp#private kalah.Pits pits]
kalah.Store	Class	(not needed)	2	[kalah.IGetScore, kalah.IGetID]	2	[kalah.PlayerProp, kalah.IPlayerProp]	4	[kalah.PlayerProp, kalah.IPlayerProp, kalah.IGetScore, kalah.IGetID]	2	[Implements:kalah.Store>kalah.IGetScore, Implements:kalah.Store>kalah.IGetID]	1	[kalah.PlayerProp]	0	[]	0	[]	0	[]	2	[kalah.Store#public int getID() {}>>>kalah.Store#public int getScore() {}, kalah.Store#public int getID() {}>>>kalah.Store#public void increaseStore(int) {}]	2	[kalah.Store#public int getID() {}>>>kalah.Store#public int getScore() {}, kalah.Store#public int getID() {}>>>kalah.Store#public void increaseStore(int) {}]	1	[value0]	1	[value0]	2	[kalah.Store#public int getID() {}, kalah.Store#public int getScore() {}]	4	[Return:kalah.Store#public void increaseStore(int) {}, kalah.Store#public <init>(int) {}>java.lang.Object#public <init>() <>*:[1], Return:kalah.Store#public int getID() {}, Return:kalah.Store#public int getScore() {}]	2	[kalah.Store#private int storeNum, kalah.Store#private final int StoreID]
